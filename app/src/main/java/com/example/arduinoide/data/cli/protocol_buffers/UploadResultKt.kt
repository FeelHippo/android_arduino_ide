// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: app/src/main/java/com/example/arduinoide/data/cli/proto/upload.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.example.arduinoide.data.cli.protocol_buffers;

@kotlin.jvm.JvmName("-initializeuploadResult")
public inline fun uploadResult(block: com.example.arduinoide.data.cli.protocol_buffers.UploadResultKt.Dsl.() -> kotlin.Unit): com.example.arduinoide.data.cli.protocol_buffers.Upload.UploadResult =
  com.example.arduinoide.data.cli.protocol_buffers.UploadResultKt.Dsl._create(com.example.arduinoide.data.cli.protocol_buffers.Upload.UploadResult.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `com.example.arduinoide.data.cli.protocol_buffers.UploadResult`
 */
public object UploadResultKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.example.arduinoide.data.cli.protocol_buffers.Upload.UploadResult.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: com.example.arduinoide.data.cli.protocol_buffers.Upload.UploadResult.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): com.example.arduinoide.data.cli.protocol_buffers.Upload.UploadResult = _builder.build()

    /**
     * ```
     * When a board requires a port disconnection to perform the upload, this
     * field returns the port where the board reconnects after the upload.
     * ```
     *
     * `.com.example.arduinoide.data.cli.protocol_buffers.Port updated_upload_port = 1;`
     */
    public var updatedUploadPort: com.example.arduinoide.data.cli.protocol_buffers.PortOuterClass.Port
      @kotlin.jvm.JvmName("getUpdatedUploadPort")
        get() = _builder.updatedUploadPort
      @kotlin.jvm.JvmName("setUpdatedUploadPort")
        set(value) {
        _builder.updatedUploadPort = value
      }
    /**
     * ```
     * When a board requires a port disconnection to perform the upload, this
     * field returns the port where the board reconnects after the upload.
     * ```
     *
     * `.com.example.arduinoide.data.cli.protocol_buffers.Port updated_upload_port = 1;`
     */
    public fun clearUpdatedUploadPort() {
      _builder.clearUpdatedUploadPort()
    }
    /**
     * ```
     * When a board requires a port disconnection to perform the upload, this
     * field returns the port where the board reconnects after the upload.
     * ```
     *
     * `.com.example.arduinoide.data.cli.protocol_buffers.Port updated_upload_port = 1;`
     * @return Whether the updatedUploadPort field is set.
     */
    public fun hasUpdatedUploadPort(): kotlin.Boolean {
      return _builder.hasUpdatedUploadPort()
    }

    public val UploadResultKt.Dsl.updatedUploadPortOrNull: com.example.arduinoide.data.cli.protocol_buffers.PortOuterClass.Port?
      get() = _builder.updatedUploadPortOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.example.arduinoide.data.cli.protocol_buffers.Upload.UploadResult.copy(block: `com.example.arduinoide.data.cli.protocol_buffers`.UploadResultKt.Dsl.() -> kotlin.Unit): com.example.arduinoide.data.cli.protocol_buffers.Upload.UploadResult =
  `com.example.arduinoide.data.cli.protocol_buffers`.UploadResultKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.example.arduinoide.data.cli.protocol_buffers.Upload.UploadResultOrBuilder.updatedUploadPortOrNull: com.example.arduinoide.data.cli.protocol_buffers.PortOuterClass.Port?
  get() = if (hasUpdatedUploadPort()) getUpdatedUploadPort() else null

