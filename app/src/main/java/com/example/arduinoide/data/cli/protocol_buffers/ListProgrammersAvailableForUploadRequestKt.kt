// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: app/src/main/java/com/example/arduinoide/data/cli/proto/upload.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.example.arduinoide.data.cli.protocol_buffers;

@kotlin.jvm.JvmName("-initializelistProgrammersAvailableForUploadRequest")
public inline fun listProgrammersAvailableForUploadRequest(block: com.example.arduinoide.data.cli.protocol_buffers.ListProgrammersAvailableForUploadRequestKt.Dsl.() -> kotlin.Unit): com.example.arduinoide.data.cli.protocol_buffers.Upload.ListProgrammersAvailableForUploadRequest =
  com.example.arduinoide.data.cli.protocol_buffers.ListProgrammersAvailableForUploadRequestKt.Dsl._create(com.example.arduinoide.data.cli.protocol_buffers.Upload.ListProgrammersAvailableForUploadRequest.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `com.example.arduinoide.data.cli.protocol_buffers.ListProgrammersAvailableForUploadRequest`
 */
public object ListProgrammersAvailableForUploadRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.example.arduinoide.data.cli.protocol_buffers.Upload.ListProgrammersAvailableForUploadRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: com.example.arduinoide.data.cli.protocol_buffers.Upload.ListProgrammersAvailableForUploadRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): com.example.arduinoide.data.cli.protocol_buffers.Upload.ListProgrammersAvailableForUploadRequest = _builder.build()

    /**
     * ```
     * Arduino Core Service instance from the `Init` response.
     * ```
     *
     * `.com.example.arduinoide.data.cli.protocol_buffers.Instance instance = 1;`
     */
    public var instance: com.example.arduinoide.data.cli.protocol_buffers.Common.Instance
      @kotlin.jvm.JvmName("getInstance")
        get() = _builder.instance
      @kotlin.jvm.JvmName("setInstance")
        set(value) {
        _builder.instance = value
      }
    /**
     * ```
     * Arduino Core Service instance from the `Init` response.
     * ```
     *
     * `.com.example.arduinoide.data.cli.protocol_buffers.Instance instance = 1;`
     */
    public fun clearInstance() {
      _builder.clearInstance()
    }
    /**
     * ```
     * Arduino Core Service instance from the `Init` response.
     * ```
     *
     * `.com.example.arduinoide.data.cli.protocol_buffers.Instance instance = 1;`
     * @return Whether the instance field is set.
     */
    public fun hasInstance(): kotlin.Boolean {
      return _builder.hasInstance()
    }

    public val ListProgrammersAvailableForUploadRequestKt.Dsl.instanceOrNull: com.example.arduinoide.data.cli.protocol_buffers.Common.Instance?
      get() = _builder.instanceOrNull

    /**
     * ```
     * Fully qualified board name of the target board (e.g., `arduino:avr:uno`).
     * ```
     *
     * `string fqbn = 2;`
     */
    public var fqbn: kotlin.String
      @kotlin.jvm.JvmName("getFqbn")
        get() = _builder.fqbn
      @kotlin.jvm.JvmName("setFqbn")
        set(value) {
        _builder.fqbn = value
      }
    /**
     * ```
     * Fully qualified board name of the target board (e.g., `arduino:avr:uno`).
     * ```
     *
     * `string fqbn = 2;`
     */
    public fun clearFqbn() {
      _builder.clearFqbn()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.example.arduinoide.data.cli.protocol_buffers.Upload.ListProgrammersAvailableForUploadRequest.copy(block: `com.example.arduinoide.data.cli.protocol_buffers`.ListProgrammersAvailableForUploadRequestKt.Dsl.() -> kotlin.Unit): com.example.arduinoide.data.cli.protocol_buffers.Upload.ListProgrammersAvailableForUploadRequest =
  `com.example.arduinoide.data.cli.protocol_buffers`.ListProgrammersAvailableForUploadRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.example.arduinoide.data.cli.protocol_buffers.Upload.ListProgrammersAvailableForUploadRequestOrBuilder.instanceOrNull: com.example.arduinoide.data.cli.protocol_buffers.Common.Instance?
  get() = if (hasInstance()) getInstance() else null

