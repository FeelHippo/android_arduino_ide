// This file is part of arduino-cli.
//
// Copyright 2024 ARDUINO SA (https://www.arduino.cc/)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package com.example.arduinoide.data.cli.protocol_buffers;

option java_package = "com.example.arduinoide.data.cli.protocol_buffers";

import "app/src/main/java/com/example/arduinoide/data/cli/proto/common.proto";
import "app/src/main/java/com/example/arduinoide/data/cli/proto/compile.proto";
import "app/src/main/java/com/example/arduinoide/data/cli/proto/core.proto";
import "app/src/main/java/com/example/arduinoide/data/cli/proto/lib.proto";
import "app/src/main/java/com/example/arduinoide/data/cli/proto/settings.proto";
import "app/src/main/java/com/example/arduinoide/data/cli/proto/upload.proto";

// The main Arduino Platform service API.
service ArduinoCoreService {
  // Create a new Arduino Core instance.
  rpc Create(CreateRequest) returns (CreateResponse) {}

  // Initializes an existing Arduino Core instance by loading platforms and
  // libraries.
  rpc Init(InitRequest) returns (stream InitResponse) {}

  // Compile an Arduino sketch.
  rpc Compile(CompileRequest) returns (stream CompileResponse);

  // Download and install a platform and its tool dependencies.
  rpc PlatformInstall(PlatformInstallRequest) returns (stream PlatformInstallResponse);

  // Download a platform and its tool dependencies to the `staging/packages`
  // subdirectory of the data directory.
  rpc PlatformDownload(PlatformDownloadRequest) returns (stream PlatformDownloadResponse);

  // Uninstall a platform as well as its tool dependencies that are not used by
  // other installed platforms.
  rpc PlatformUninstall(PlatformUninstallRequest) returns (stream PlatformUninstallResponse);

  // Upgrade an installed platform to the latest version.
  rpc PlatformUpgrade(PlatformUpgradeRequest) returns (stream PlatformUpgradeResponse);

  // Upload a compiled sketch to a board.
  rpc Upload(UploadRequest) returns (stream UploadResponse);

  // Upload a compiled sketch to a board using a programmer.
  rpc UploadUsingProgrammer(UploadUsingProgrammerRequest) returns (stream UploadUsingProgrammerResponse);

  // Returns the list of users fields necessary to upload to that board
  // using the specified protocol.
  rpc SupportedUserFields(SupportedUserFieldsRequest) returns (SupportedUserFieldsResponse);

  // List programmers available for a board.
  rpc ListProgrammersAvailableForUpload(ListProgrammersAvailableForUploadRequest) returns (ListProgrammersAvailableForUploadResponse);

  // Burn bootloader to a board.
  rpc BurnBootloader(BurnBootloaderRequest) returns (stream BurnBootloaderResponse);

  // Search for a platform in the platforms indexes.
  rpc PlatformSearch(PlatformSearchRequest) returns (PlatformSearchResponse);

  // Download the archive file of an Arduino library in the libraries index to
  // the staging directory.
  rpc LibraryDownload(LibraryDownloadRequest) returns (stream LibraryDownloadResponse);

  // Download and install an Arduino library from the libraries index.
  rpc LibraryInstall(LibraryInstallRequest) returns (stream LibraryInstallResponse);

  // Upgrade a library to the newest version available.
  rpc LibraryUpgrade(LibraryUpgradeRequest) returns (stream LibraryUpgradeResponse);

  // Install a library from a Zip File.
  rpc ZipLibraryInstall(ZipLibraryInstallRequest) returns (stream ZipLibraryInstallResponse);

  // Download and install a library from a git url.
  rpc GitLibraryInstall(GitLibraryInstallRequest) returns (stream GitLibraryInstallResponse);

  // Uninstall an Arduino library.
  rpc LibraryUninstall(LibraryUninstallRequest) returns (stream LibraryUninstallResponse);

  // Upgrade all installed Arduino libraries to the newest version available.
  rpc LibraryUpgradeAll(LibraryUpgradeAllRequest) returns (stream LibraryUpgradeAllResponse);

  // List the recursive dependencies of a library, as defined by the `depends`
  // field of the library.properties files.
  rpc LibraryResolveDependencies(LibraryResolveDependenciesRequest) returns (LibraryResolveDependenciesResponse);

  // Search the Arduino libraries index for libraries.
  rpc LibrarySearch(LibrarySearchRequest) returns (LibrarySearchResponse);

  // List the installed libraries.
  rpc LibraryList(LibraryListRequest) returns (LibraryListResponse);

  // Writes the settings currently stored in memory in a YAML file.
  rpc ConfigurationSave(ConfigurationSaveRequest) returns (ConfigurationSaveResponse);

  // Read the settings from a YAML file.
  rpc ConfigurationOpen(ConfigurationOpenRequest) returns (ConfigurationOpenResponse);

  // Get the current configuration.
  rpc ConfigurationGet(ConfigurationGetRequest) returns (ConfigurationGetResponse);

  // Enumerate all the keys/values pairs available in the configuration.
  rpc SettingsEnumerate(SettingsEnumerateRequest) returns (SettingsEnumerateResponse);

  // Get a single configuration value.
  rpc SettingsGetValue(SettingsGetValueRequest) returns (SettingsGetValueResponse);

  // Set a single configuration value.
  rpc SettingsSetValue(SettingsSetValueRequest) returns (SettingsSetValueResponse);
}

message CreateRequest {}

message CreateResponse {
  // An Arduino Core instance.
  Instance instance = 1;
}

message InitRequest {
  // An Arduino Core instance.
  Instance instance = 1;
  // Profile to use.
  string profile = 2;
  // The path where the sketch is stored.
  string sketch_path = 3;
}

message InitResponse {
  message Progress {
    // Progress of the downloads of platforms and libraries index files.
    DownloadProgress download_progress = 1;
    // Describes the current stage of the initialization.
    TaskProgress task_progress = 2;
  }
  oneof message {
    // The initialization progress.
    Progress init_progress = 1;
    // The error in case the initialization failed.
    string error = 2;
    // Selected profile information.
    SketchProfile profile = 3;
  }
}

// Represent the reason why an instance initialization failed.
enum FailedInstanceInitReason {
  // FAILED_INSTANCE_INIT_REASON_UNSPECIFIED the error reason is not specialized.
  FAILED_INSTANCE_INIT_REASON_UNSPECIFIED = 0;
  // INVALID_INDEX_URL a package index url is malformed.
  FAILED_INSTANCE_INIT_REASON_INVALID_INDEX_URL = 1;
  // FAILED_INSTANCE_INIT_REASON_INDEX_LOAD_ERROR failure encountered while
  // loading an index.
  FAILED_INSTANCE_INIT_REASON_INDEX_LOAD_ERROR = 2;
  // FAILED_INSTANCE_INIT_REASON_TOOL_LOAD_ERROR failure encountered while
  // loading a tool.
  FAILED_INSTANCE_INIT_REASON_TOOL_LOAD_ERROR = 3;
  // FAILED_INSTANCE_INIT_REASON_INDEX_DOWNLOAD_ERROR failure encountered while
  // downloading an index.
  FAILED_INSTANCE_INIT_REASON_INDEX_DOWNLOAD_ERROR = 4;
}

message FailedInstanceInitError {
  // specific cause of the error.
  FailedInstanceInitReason reason = 1;
  // explanation of the error.
  string message = 2;
}

message LoadSketchRequest {
  // Absolute path to single sketch file or a sketch folder.
  string sketch_path = 2;

  reserved 1;
}

message LoadSketchResponse {
  // The loaded sketch.
  Sketch sketch = 1;
}
