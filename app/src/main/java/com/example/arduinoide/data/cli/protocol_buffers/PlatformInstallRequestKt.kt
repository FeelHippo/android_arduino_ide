// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: app/src/main/java/com/example/arduinoide/data/cli/proto/core.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.example.arduinoide.data.cli.protocol_buffers;

@kotlin.jvm.JvmName("-initializeplatformInstallRequest")
public inline fun platformInstallRequest(block: com.example.arduinoide.data.cli.protocol_buffers.PlatformInstallRequestKt.Dsl.() -> kotlin.Unit): com.example.arduinoide.data.cli.protocol_buffers.Core.PlatformInstallRequest =
  com.example.arduinoide.data.cli.protocol_buffers.PlatformInstallRequestKt.Dsl._create(com.example.arduinoide.data.cli.protocol_buffers.Core.PlatformInstallRequest.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `com.example.arduinoide.data.cli.protocol_buffers.PlatformInstallRequest`
 */
public object PlatformInstallRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.example.arduinoide.data.cli.protocol_buffers.Core.PlatformInstallRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: com.example.arduinoide.data.cli.protocol_buffers.Core.PlatformInstallRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): com.example.arduinoide.data.cli.protocol_buffers.Core.PlatformInstallRequest = _builder.build()

    /**
     * ```
     * Arduino Core Service instance from the `Init` response.
     * ```
     *
     * `.com.example.arduinoide.data.cli.protocol_buffers.Instance instance = 1;`
     */
    public var instance: com.example.arduinoide.data.cli.protocol_buffers.Common.Instance
      @kotlin.jvm.JvmName("getInstance")
        get() = _builder.instance
      @kotlin.jvm.JvmName("setInstance")
        set(value) {
        _builder.instance = value
      }
    /**
     * ```
     * Arduino Core Service instance from the `Init` response.
     * ```
     *
     * `.com.example.arduinoide.data.cli.protocol_buffers.Instance instance = 1;`
     */
    public fun clearInstance() {
      _builder.clearInstance()
    }
    /**
     * ```
     * Arduino Core Service instance from the `Init` response.
     * ```
     *
     * `.com.example.arduinoide.data.cli.protocol_buffers.Instance instance = 1;`
     * @return Whether the instance field is set.
     */
    public fun hasInstance(): kotlin.Boolean {
      return _builder.hasInstance()
    }

    public val PlatformInstallRequestKt.Dsl.instanceOrNull: com.example.arduinoide.data.cli.protocol_buffers.Common.Instance?
      get() = _builder.instanceOrNull

    /**
     * ```
     * Vendor name of the platform (e.g., `arduino`).
     * ```
     *
     * `string platform_package = 2;`
     */
    public var platformPackage: kotlin.String
      @kotlin.jvm.JvmName("getPlatformPackage")
        get() = _builder.platformPackage
      @kotlin.jvm.JvmName("setPlatformPackage")
        set(value) {
        _builder.platformPackage = value
      }
    /**
     * ```
     * Vendor name of the platform (e.g., `arduino`).
     * ```
     *
     * `string platform_package = 2;`
     */
    public fun clearPlatformPackage() {
      _builder.clearPlatformPackage()
    }

    /**
     * ```
     * Architecture name of the platform (e.g., `avr`).
     * ```
     *
     * `string architecture = 3;`
     */
    public var architecture: kotlin.String
      @kotlin.jvm.JvmName("getArchitecture")
        get() = _builder.architecture
      @kotlin.jvm.JvmName("setArchitecture")
        set(value) {
        _builder.architecture = value
      }
    /**
     * ```
     * Architecture name of the platform (e.g., `avr`).
     * ```
     *
     * `string architecture = 3;`
     */
    public fun clearArchitecture() {
      _builder.clearArchitecture()
    }

    /**
     * ```
     * Platform version to install.
     * ```
     *
     * `string version = 4;`
     */
    public var version: kotlin.String
      @kotlin.jvm.JvmName("getVersion")
        get() = _builder.version
      @kotlin.jvm.JvmName("setVersion")
        set(value) {
        _builder.version = value
      }
    /**
     * ```
     * Platform version to install.
     * ```
     *
     * `string version = 4;`
     */
    public fun clearVersion() {
      _builder.clearVersion()
    }

    /**
     * ```
     * Set to true to not run (eventual) post install scripts for trusted
     * platforms.
     * ```
     *
     * `bool skip_post_install = 5;`
     */
    public var skipPostInstall: kotlin.Boolean
      @kotlin.jvm.JvmName("getSkipPostInstall")
        get() = _builder.skipPostInstall
      @kotlin.jvm.JvmName("setSkipPostInstall")
        set(value) {
        _builder.skipPostInstall = value
      }
    /**
     * ```
     * Set to true to not run (eventual) post install scripts for trusted
     * platforms.
     * ```
     *
     * `bool skip_post_install = 5;`
     */
    public fun clearSkipPostInstall() {
      _builder.clearSkipPostInstall()
    }

    /**
     * ```
     * Set to true to skip installation if a different version of the platform
     * is already installed.
     * ```
     *
     * `bool no_overwrite = 6;`
     */
    public var noOverwrite: kotlin.Boolean
      @kotlin.jvm.JvmName("getNoOverwrite")
        get() = _builder.noOverwrite
      @kotlin.jvm.JvmName("setNoOverwrite")
        set(value) {
        _builder.noOverwrite = value
      }
    /**
     * ```
     * Set to true to skip installation if a different version of the platform
     * is already installed.
     * ```
     *
     * `bool no_overwrite = 6;`
     */
    public fun clearNoOverwrite() {
      _builder.clearNoOverwrite()
    }

    /**
     * ```
     * Set to true to not run (eventual) pre uninstall scripts for trusted
     * platforms when performing platform upgrades.
     * ```
     *
     * `bool skip_pre_uninstall = 7;`
     */
    public var skipPreUninstall: kotlin.Boolean
      @kotlin.jvm.JvmName("getSkipPreUninstall")
        get() = _builder.skipPreUninstall
      @kotlin.jvm.JvmName("setSkipPreUninstall")
        set(value) {
        _builder.skipPreUninstall = value
      }
    /**
     * ```
     * Set to true to not run (eventual) pre uninstall scripts for trusted
     * platforms when performing platform upgrades.
     * ```
     *
     * `bool skip_pre_uninstall = 7;`
     */
    public fun clearSkipPreUninstall() {
      _builder.clearSkipPreUninstall()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.example.arduinoide.data.cli.protocol_buffers.Core.PlatformInstallRequest.copy(block: `com.example.arduinoide.data.cli.protocol_buffers`.PlatformInstallRequestKt.Dsl.() -> kotlin.Unit): com.example.arduinoide.data.cli.protocol_buffers.Core.PlatformInstallRequest =
  `com.example.arduinoide.data.cli.protocol_buffers`.PlatformInstallRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.example.arduinoide.data.cli.protocol_buffers.Core.PlatformInstallRequestOrBuilder.instanceOrNull: com.example.arduinoide.data.cli.protocol_buffers.Common.Instance?
  get() = if (hasInstance()) getInstance() else null

