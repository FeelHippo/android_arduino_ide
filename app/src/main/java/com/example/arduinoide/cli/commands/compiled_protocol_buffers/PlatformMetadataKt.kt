// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: common.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package compiled_protocol_buffers;

@kotlin.jvm.JvmName("-initializeplatformMetadata")
public inline fun platformMetadata(block: compiled_protocol_buffers.PlatformMetadataKt.Dsl.() -> kotlin.Unit): compiled_protocol_buffers.Common.PlatformMetadata =
  compiled_protocol_buffers.PlatformMetadataKt.Dsl._create(compiled_protocol_buffers.Common.PlatformMetadata.newBuilder()).apply { block() }._build()
/**
 * ```
 * PlatformMetadata contains generic information about a platform (not
 * correlated to a specific release).
 * ```
 *
 * Protobuf type `compiled_protocol_buffers.PlatformMetadata`
 */
public object PlatformMetadataKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: compiled_protocol_buffers.Common.PlatformMetadata.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: compiled_protocol_buffers.Common.PlatformMetadata.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): compiled_protocol_buffers.Common.PlatformMetadata = _builder.build()

    /**
     * ```
     * Platform ID (e.g., `arduino:avr`).
     * ```
     *
     * `string id = 1;`
     */
    public var id: kotlin.String
      @kotlin.jvm.JvmName("getId")
        get() = _builder.id
      @kotlin.jvm.JvmName("setId")
        set(value) {
        _builder.id = value
      }
    /**
     * ```
     * Platform ID (e.g., `arduino:avr`).
     * ```
     *
     * `string id = 1;`
     */
    public fun clearId() {
      _builder.clearId()
    }

    /**
     * ```
     * Maintainer of the platform's package.
     * ```
     *
     * `string maintainer = 2;`
     */
    public var maintainer: kotlin.String
      @kotlin.jvm.JvmName("getMaintainer")
        get() = _builder.maintainer
      @kotlin.jvm.JvmName("setMaintainer")
        set(value) {
        _builder.maintainer = value
      }
    /**
     * ```
     * Maintainer of the platform's package.
     * ```
     *
     * `string maintainer = 2;`
     */
    public fun clearMaintainer() {
      _builder.clearMaintainer()
    }

    /**
     * ```
     * A URL provided by the author of the platform's package, intended to point
     * to their website.
     * ```
     *
     * `string website = 3;`
     */
    public var website: kotlin.String
      @kotlin.jvm.JvmName("getWebsite")
        get() = _builder.website
      @kotlin.jvm.JvmName("setWebsite")
        set(value) {
        _builder.website = value
      }
    /**
     * ```
     * A URL provided by the author of the platform's package, intended to point
     * to their website.
     * ```
     *
     * `string website = 3;`
     */
    public fun clearWebsite() {
      _builder.clearWebsite()
    }

    /**
     * ```
     * Email of the maintainer of the platform's package.
     * ```
     *
     * `string email = 4;`
     */
    public var email: kotlin.String
      @kotlin.jvm.JvmName("getEmail")
        get() = _builder.email
      @kotlin.jvm.JvmName("setEmail")
        set(value) {
        _builder.email = value
      }
    /**
     * ```
     * Email of the maintainer of the platform's package.
     * ```
     *
     * `string email = 4;`
     */
    public fun clearEmail() {
      _builder.clearEmail()
    }

    /**
     * ```
     * If true this Platform has been installed manually in the user' sketchbook
     * hardware folder.
     * ```
     *
     * `bool manually_installed = 5;`
     */
    public var manuallyInstalled: kotlin.Boolean
      @kotlin.jvm.JvmName("getManuallyInstalled")
        get() = _builder.manuallyInstalled
      @kotlin.jvm.JvmName("setManuallyInstalled")
        set(value) {
        _builder.manuallyInstalled = value
      }
    /**
     * ```
     * If true this Platform has been installed manually in the user' sketchbook
     * hardware folder.
     * ```
     *
     * `bool manually_installed = 5;`
     */
    public fun clearManuallyInstalled() {
      _builder.clearManuallyInstalled()
    }

    /**
     * ```
     * True if the latest release of this Platform has been deprecated.
     * ```
     *
     * `bool deprecated = 6;`
     */
    public var deprecated: kotlin.Boolean
      @kotlin.jvm.JvmName("getDeprecated")
        get() = _builder.deprecated
      @kotlin.jvm.JvmName("setDeprecated")
        set(value) {
        _builder.deprecated = value
      }
    /**
     * ```
     * True if the latest release of this Platform has been deprecated.
     * ```
     *
     * `bool deprecated = 6;`
     */
    public fun clearDeprecated() {
      _builder.clearDeprecated()
    }

    /**
     * ```
     * If true the platform is indexed.
     * ```
     *
     * `bool indexed = 7;`
     */
    public var indexed: kotlin.Boolean
      @kotlin.jvm.JvmName("getIndexed")
        get() = _builder.indexed
      @kotlin.jvm.JvmName("setIndexed")
        set(value) {
        _builder.indexed = value
      }
    /**
     * ```
     * If true the platform is indexed.
     * ```
     *
     * `bool indexed = 7;`
     */
    public fun clearIndexed() {
      _builder.clearIndexed()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun compiled_protocol_buffers.Common.PlatformMetadata.copy(block: `compiled_protocol_buffers`.PlatformMetadataKt.Dsl.() -> kotlin.Unit): compiled_protocol_buffers.Common.PlatformMetadata =
  `compiled_protocol_buffers`.PlatformMetadataKt.Dsl._create(this.toBuilder()).apply { block() }._build()

