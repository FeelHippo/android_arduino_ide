// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: app/src/main/java/com/example/arduinoide/cli/commands/proto/compile.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package protocol_buffers;

@kotlin.jvm.JvmName("-initializecompileRequest")
public inline fun compileRequest(block: protocol_buffers.CompileRequestKt.Dsl.() -> kotlin.Unit): protocol_buffers.Compile.CompileRequest =
  protocol_buffers.CompileRequestKt.Dsl._create(protocol_buffers.Compile.CompileRequest.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `protocol_buffers.CompileRequest`
 */
public object CompileRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: protocol_buffers.Compile.CompileRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: protocol_buffers.Compile.CompileRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): protocol_buffers.Compile.CompileRequest = _builder.build()

    /**
     * ```
     * Arduino Core Service instance from the `Init` response.
     * ```
     *
     * `.protocol_buffers.Instance instance = 1;`
     */
    public var instance: protocol_buffers.Common.Instance
      @kotlin.jvm.JvmName("getInstance")
        get() = _builder.instance
      @kotlin.jvm.JvmName("setInstance")
        set(value) {
        _builder.instance = value
      }
    /**
     * ```
     * Arduino Core Service instance from the `Init` response.
     * ```
     *
     * `.protocol_buffers.Instance instance = 1;`
     */
    public fun clearInstance() {
      _builder.clearInstance()
    }
    /**
     * ```
     * Arduino Core Service instance from the `Init` response.
     * ```
     *
     * `.protocol_buffers.Instance instance = 1;`
     * @return Whether the instance field is set.
     */
    public fun hasInstance(): kotlin.Boolean {
      return _builder.hasInstance()
    }

    public val CompileRequestKt.Dsl.instanceOrNull: protocol_buffers.Common.Instance?
      get() = _builder.instanceOrNull

    /**
     * ```
     * Fully Qualified Board Name, e.g.: `arduino:avr:uno`. If this field is
     * not defined, the FQBN of the board attached to the sketch via the
     * `BoardAttach` method is used.
     * ```
     *
     * `string fqbn = 2;`
     */
    public var fqbn: kotlin.String
      @kotlin.jvm.JvmName("getFqbn")
        get() = _builder.fqbn
      @kotlin.jvm.JvmName("setFqbn")
        set(value) {
        _builder.fqbn = value
      }
    /**
     * ```
     * Fully Qualified Board Name, e.g.: `arduino:avr:uno`. If this field is
     * not defined, the FQBN of the board attached to the sketch via the
     * `BoardAttach` method is used.
     * ```
     *
     * `string fqbn = 2;`
     */
    public fun clearFqbn() {
      _builder.clearFqbn()
    }

    /**
     * ```
     * The path where the sketch is stored.
     * ```
     *
     * `string sketch_path = 3;`
     */
    public var sketchPath: kotlin.String
      @kotlin.jvm.JvmName("getSketchPath")
        get() = _builder.sketchPath
      @kotlin.jvm.JvmName("setSketchPath")
        set(value) {
        _builder.sketchPath = value
      }
    /**
     * ```
     * The path where the sketch is stored.
     * ```
     *
     * `string sketch_path = 3;`
     */
    public fun clearSketchPath() {
      _builder.clearSketchPath()
    }

    /**
     * ```
     * Just get the build properties and do not run the full compile.
     * ```
     *
     * `bool show_properties = 4;`
     */
    public var showProperties: kotlin.Boolean
      @kotlin.jvm.JvmName("getShowProperties")
        get() = _builder.showProperties
      @kotlin.jvm.JvmName("setShowProperties")
        set(value) {
        _builder.showProperties = value
      }
    /**
     * ```
     * Just get the build properties and do not run the full compile.
     * ```
     *
     * `bool show_properties = 4;`
     */
    public fun clearShowProperties() {
      _builder.clearShowProperties()
    }

    /**
     * ```
     * Print preprocessed code to stdout instead of compiling.
     * ```
     *
     * `bool preprocess = 5;`
     */
    public var preprocess: kotlin.Boolean
      @kotlin.jvm.JvmName("getPreprocess")
        get() = _builder.preprocess
      @kotlin.jvm.JvmName("setPreprocess")
        set(value) {
        _builder.preprocess = value
      }
    /**
     * ```
     * Print preprocessed code to stdout instead of compiling.
     * ```
     *
     * `bool preprocess = 5;`
     */
    public fun clearPreprocess() {
      _builder.clearPreprocess()
    }

    /**
     * ```
     * Builds of core and sketches are saved into this path to be cached and
     * reused.
     * ```
     *
     * `string build_cache_path = 6 [deprecated = true];`
     */
    @kotlin.Deprecated(message = "Field buildCachePath is deprecated") public var buildCachePath: kotlin.String
      @kotlin.jvm.JvmName("getBuildCachePath")
        get() = _builder.buildCachePath
      @kotlin.jvm.JvmName("setBuildCachePath")
        set(value) {
        _builder.buildCachePath = value
      }
    /**
     * ```
     * Builds of core and sketches are saved into this path to be cached and
     * reused.
     * ```
     *
     * `string build_cache_path = 6 [deprecated = true];`
     */
    public fun clearBuildCachePath() {
      _builder.clearBuildCachePath()
    }

    /**
     * ```
     * Path to use to store the files used for the compilation. If omitted,
     * a directory will be created in the operating system's default temporary
     * path.
     * ```
     *
     * `string build_path = 7;`
     */
    public var buildPath: kotlin.String
      @kotlin.jvm.JvmName("getBuildPath")
        get() = _builder.buildPath
      @kotlin.jvm.JvmName("setBuildPath")
        set(value) {
        _builder.buildPath = value
      }
    /**
     * ```
     * Path to use to store the files used for the compilation. If omitted,
     * a directory will be created in the operating system's default temporary
     * path.
     * ```
     *
     * `string build_path = 7;`
     */
    public fun clearBuildPath() {
      _builder.clearBuildPath()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class BuildPropertiesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * List of custom build properties.
     * ```
     *
     * `repeated string build_properties = 8;`
     * @return A list containing the buildProperties.
     */
    public val buildProperties: com.google.protobuf.kotlin.DslList<kotlin.String, BuildPropertiesProxy>
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      get() = com.google.protobuf.kotlin.DslList(
        _builder.buildPropertiesList
      )
    /**
     * ```
     * List of custom build properties.
     * ```
     *
     * `repeated string build_properties = 8;`
     * @param value The buildProperties to add.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("addBuildProperties")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, BuildPropertiesProxy>.add(value: kotlin.String) {
      _builder.addBuildProperties(value)
    }
    /**
     * ```
     * List of custom build properties.
     * ```
     *
     * `repeated string build_properties = 8;`
     * @param value The buildProperties to add.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("plusAssignBuildProperties")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, BuildPropertiesProxy>.plusAssign(value: kotlin.String) {
      add(value)
    }
    /**
     * ```
     * List of custom build properties.
     * ```
     *
     * `repeated string build_properties = 8;`
     * @param values The buildProperties to add.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("addAllBuildProperties")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, BuildPropertiesProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllBuildProperties(values)
    }
    /**
     * ```
     * List of custom build properties.
     * ```
     *
     * `repeated string build_properties = 8;`
     * @param values The buildProperties to add.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("plusAssignAllBuildProperties")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, BuildPropertiesProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
      addAll(values)
    }
    /**
     * ```
     * List of custom build properties.
     * ```
     *
     * `repeated string build_properties = 8;`
     * @param index The index to set the value at.
     * @param value The buildProperties to set.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("setBuildProperties")
    public operator fun com.google.protobuf.kotlin.DslList<kotlin.String, BuildPropertiesProxy>.set(index: kotlin.Int, value: kotlin.String) {
      _builder.setBuildProperties(index, value)
    }/**
     * ```
     * List of custom build properties.
     * ```
     *
     * `repeated string build_properties = 8;`
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("setBuildProperties")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, BuildPropertiesProxy>.clear() {
      _builder.clearBuildProperties()
    }
    /**
     * ```
     * Used to tell gcc which warning level to use. The level names are: "none",
     * "default", "more" and "all".
     * ```
     *
     * `string warnings = 9;`
     */
    public var warnings: kotlin.String
      @kotlin.jvm.JvmName("getWarnings")
        get() = _builder.warnings
      @kotlin.jvm.JvmName("setWarnings")
        set(value) {
        _builder.warnings = value
      }
    /**
     * ```
     * Used to tell gcc which warning level to use. The level names are: "none",
     * "default", "more" and "all".
     * ```
     *
     * `string warnings = 9;`
     */
    public fun clearWarnings() {
      _builder.clearWarnings()
    }

    /**
     * ```
     * Turns on verbose mode.
     * ```
     *
     * `bool verbose = 10;`
     */
    public var verbose: kotlin.Boolean
      @kotlin.jvm.JvmName("getVerbose")
        get() = _builder.verbose
      @kotlin.jvm.JvmName("setVerbose")
        set(value) {
        _builder.verbose = value
      }
    /**
     * ```
     * Turns on verbose mode.
     * ```
     *
     * `bool verbose = 10;`
     */
    public fun clearVerbose() {
      _builder.clearVerbose()
    }

    /**
     * ```
     * Suppresses almost every output.
     * ```
     *
     * `bool quiet = 11;`
     */
    public var quiet: kotlin.Boolean
      @kotlin.jvm.JvmName("getQuiet")
        get() = _builder.quiet
      @kotlin.jvm.JvmName("setQuiet")
        set(value) {
        _builder.quiet = value
      }
    /**
     * ```
     * Suppresses almost every output.
     * ```
     *
     * `bool quiet = 11;`
     */
    public fun clearQuiet() {
      _builder.clearQuiet()
    }

    /**
     * ```
     * The max number of concurrent compiler instances to run (as `make -jx`).
     * If jobs is set to 0, it will use the number of available CPUs as the
     * maximum.
     * ```
     *
     * `int32 jobs = 14;`
     */
    public var jobs: kotlin.Int
      @kotlin.jvm.JvmName("getJobs")
        get() = _builder.jobs
      @kotlin.jvm.JvmName("setJobs")
        set(value) {
        _builder.jobs = value
      }
    /**
     * ```
     * The max number of concurrent compiler instances to run (as `make -jx`).
     * If jobs is set to 0, it will use the number of available CPUs as the
     * maximum.
     * ```
     *
     * `int32 jobs = 14;`
     */
    public fun clearJobs() {
      _builder.clearJobs()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class LibrariesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * A list of paths to directories containing a collection of libraries.
     * ```
     *
     * `repeated string libraries = 15;`
     * @return A list containing the libraries.
     */
    public val libraries: com.google.protobuf.kotlin.DslList<kotlin.String, LibrariesProxy>
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      get() = com.google.protobuf.kotlin.DslList(
        _builder.librariesList
      )
    /**
     * ```
     * A list of paths to directories containing a collection of libraries.
     * ```
     *
     * `repeated string libraries = 15;`
     * @param value The libraries to add.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("addLibraries")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, LibrariesProxy>.add(value: kotlin.String) {
      _builder.addLibraries(value)
    }
    /**
     * ```
     * A list of paths to directories containing a collection of libraries.
     * ```
     *
     * `repeated string libraries = 15;`
     * @param value The libraries to add.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("plusAssignLibraries")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, LibrariesProxy>.plusAssign(value: kotlin.String) {
      add(value)
    }
    /**
     * ```
     * A list of paths to directories containing a collection of libraries.
     * ```
     *
     * `repeated string libraries = 15;`
     * @param values The libraries to add.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("addAllLibraries")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, LibrariesProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllLibraries(values)
    }
    /**
     * ```
     * A list of paths to directories containing a collection of libraries.
     * ```
     *
     * `repeated string libraries = 15;`
     * @param values The libraries to add.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("plusAssignAllLibraries")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, LibrariesProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
      addAll(values)
    }
    /**
     * ```
     * A list of paths to directories containing a collection of libraries.
     * ```
     *
     * `repeated string libraries = 15;`
     * @param index The index to set the value at.
     * @param value The libraries to set.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("setLibraries")
    public operator fun com.google.protobuf.kotlin.DslList<kotlin.String, LibrariesProxy>.set(index: kotlin.Int, value: kotlin.String) {
      _builder.setLibraries(index, value)
    }/**
     * ```
     * A list of paths to directories containing a collection of libraries.
     * ```
     *
     * `repeated string libraries = 15;`
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("setLibraries")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, LibrariesProxy>.clear() {
      _builder.clearLibraries()
    }
    /**
     * ```
     * Optimize compile output for debug, not for release.
     * ```
     *
     * `bool optimize_for_debug = 16;`
     */
    public var optimizeForDebug: kotlin.Boolean
      @kotlin.jvm.JvmName("getOptimizeForDebug")
        get() = _builder.optimizeForDebug
      @kotlin.jvm.JvmName("setOptimizeForDebug")
        set(value) {
        _builder.optimizeForDebug = value
      }
    /**
     * ```
     * Optimize compile output for debug, not for release.
     * ```
     *
     * `bool optimize_for_debug = 16;`
     */
    public fun clearOptimizeForDebug() {
      _builder.clearOptimizeForDebug()
    }

    /**
     * ```
     * Optional: save the build artifacts in this directory, the directory must
     * exist.
     * ```
     *
     * `string export_dir = 18;`
     */
    public var exportDir: kotlin.String
      @kotlin.jvm.JvmName("getExportDir")
        get() = _builder.exportDir
      @kotlin.jvm.JvmName("setExportDir")
        set(value) {
        _builder.exportDir = value
      }
    /**
     * ```
     * Optional: save the build artifacts in this directory, the directory must
     * exist.
     * ```
     *
     * `string export_dir = 18;`
     */
    public fun clearExportDir() {
      _builder.clearExportDir()
    }

    /**
     * ```
     * Optional: cleanup the build folder and do not use any previously cached
     * build.
     * ```
     *
     * `bool clean = 19;`
     */
    public var clean: kotlin.Boolean
      @kotlin.jvm.JvmName("getClean")
        get() = _builder.clean
      @kotlin.jvm.JvmName("setClean")
        set(value) {
        _builder.clean = value
      }
    /**
     * ```
     * Optional: cleanup the build folder and do not use any previously cached
     * build.
     * ```
     *
     * `bool clean = 19;`
     */
    public fun clearClean() {
      _builder.clearClean()
    }

    /**
     * ```
     * When set to `true` only the compilation database will be produced and no
     * actual build will be performed.
     * ```
     *
     * `bool create_compilation_database_only = 21;`
     */
    public var createCompilationDatabaseOnly: kotlin.Boolean
      @kotlin.jvm.JvmName("getCreateCompilationDatabaseOnly")
        get() = _builder.createCompilationDatabaseOnly
      @kotlin.jvm.JvmName("setCreateCompilationDatabaseOnly")
        set(value) {
        _builder.createCompilationDatabaseOnly = value
      }
    /**
     * ```
     * When set to `true` only the compilation database will be produced and no
     * actual build will be performed.
     * ```
     *
     * `bool create_compilation_database_only = 21;`
     */
    public fun clearCreateCompilationDatabaseOnly() {
      _builder.clearCreateCompilationDatabaseOnly()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class SourceOverrideProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * This map (source file -> new content) let the builder use the provided
     * content instead of reading the corresponding file on disk. This is useful
     * for IDE that have unsaved changes in memory. The path must be relative to
     * the sketch directory. Only files from the sketch are allowed.
     * ```
     *
     * `map<string, string> source_override = 22;`
     */
     public val sourceOverride: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, SourceOverrideProxy>
      @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("getSourceOverrideMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.sourceOverrideMap
      )
    /**
     * ```
     * This map (source file -> new content) let the builder use the provided
     * content instead of reading the corresponding file on disk. This is useful
     * for IDE that have unsaved changes in memory. The path must be relative to
     * the sketch directory. Only files from the sketch are allowed.
     * ```
     *
     * `map<string, string> source_override = 22;`
     */
    @kotlin.jvm.JvmName("putSourceOverride")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, SourceOverrideProxy>
      .put(key: kotlin.String, value: kotlin.String) {
         _builder.putSourceOverride(key, value)
       }
    /**
     * ```
     * This map (source file -> new content) let the builder use the provided
     * content instead of reading the corresponding file on disk. This is useful
     * for IDE that have unsaved changes in memory. The path must be relative to
     * the sketch directory. Only files from the sketch are allowed.
     * ```
     *
     * `map<string, string> source_override = 22;`
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("setSourceOverride")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, SourceOverrideProxy>
      .set(key: kotlin.String, value: kotlin.String) {
         put(key, value)
       }
    /**
     * ```
     * This map (source file -> new content) let the builder use the provided
     * content instead of reading the corresponding file on disk. This is useful
     * for IDE that have unsaved changes in memory. The path must be relative to
     * the sketch directory. Only files from the sketch are allowed.
     * ```
     *
     * `map<string, string> source_override = 22;`
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("removeSourceOverride")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, SourceOverrideProxy>
      .remove(key: kotlin.String) {
         _builder.removeSourceOverride(key)
       }
    /**
     * ```
     * This map (source file -> new content) let the builder use the provided
     * content instead of reading the corresponding file on disk. This is useful
     * for IDE that have unsaved changes in memory. The path must be relative to
     * the sketch directory. Only files from the sketch are allowed.
     * ```
     *
     * `map<string, string> source_override = 22;`
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("putAllSourceOverride")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, SourceOverrideProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.String>) {
         _builder.putAllSourceOverride(map)
       }
    /**
     * ```
     * This map (source file -> new content) let the builder use the provided
     * content instead of reading the corresponding file on disk. This is useful
     * for IDE that have unsaved changes in memory. The path must be relative to
     * the sketch directory. Only files from the sketch are allowed.
     * ```
     *
     * `map<string, string> source_override = 22;`
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("clearSourceOverride")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, SourceOverrideProxy>
      .clear() {
         _builder.clearSourceOverride()
       }

    /**
     * ```
     * When set to `true` the compiled binary will be copied to the export
     * directory.
     * ```
     *
     * `optional bool export_binaries = 23;`
     */
    public var exportBinaries: kotlin.Boolean
      @kotlin.jvm.JvmName("getExportBinaries")
        get() = _builder.exportBinaries
      @kotlin.jvm.JvmName("setExportBinaries")
        set(value) {
        _builder.exportBinaries = value
      }
    /**
     * ```
     * When set to `true` the compiled binary will be copied to the export
     * directory.
     * ```
     *
     * `optional bool export_binaries = 23;`
     */
    public fun clearExportBinaries() {
      _builder.clearExportBinaries()
    }
    /**
     * ```
     * When set to `true` the compiled binary will be copied to the export
     * directory.
     * ```
     *
     * `optional bool export_binaries = 23;`
     * @return Whether the exportBinaries field is set.
     */
    public fun hasExportBinaries(): kotlin.Boolean {
      return _builder.hasExportBinaries()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class LibraryProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * A list of paths to single libraries root directory.
     * ```
     *
     * `repeated string library = 24;`
     * @return A list containing the library.
     */
    public val library: com.google.protobuf.kotlin.DslList<kotlin.String, LibraryProxy>
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      get() = com.google.protobuf.kotlin.DslList(
        _builder.libraryList
      )
    /**
     * ```
     * A list of paths to single libraries root directory.
     * ```
     *
     * `repeated string library = 24;`
     * @param value The library to add.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("addLibrary")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, LibraryProxy>.add(value: kotlin.String) {
      _builder.addLibrary(value)
    }
    /**
     * ```
     * A list of paths to single libraries root directory.
     * ```
     *
     * `repeated string library = 24;`
     * @param value The library to add.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("plusAssignLibrary")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, LibraryProxy>.plusAssign(value: kotlin.String) {
      add(value)
    }
    /**
     * ```
     * A list of paths to single libraries root directory.
     * ```
     *
     * `repeated string library = 24;`
     * @param values The library to add.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("addAllLibrary")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, LibraryProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllLibrary(values)
    }
    /**
     * ```
     * A list of paths to single libraries root directory.
     * ```
     *
     * `repeated string library = 24;`
     * @param values The library to add.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("plusAssignAllLibrary")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, LibraryProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
      addAll(values)
    }
    /**
     * ```
     * A list of paths to single libraries root directory.
     * ```
     *
     * `repeated string library = 24;`
     * @param index The index to set the value at.
     * @param value The library to set.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("setLibrary")
    public operator fun com.google.protobuf.kotlin.DslList<kotlin.String, LibraryProxy>.set(index: kotlin.Int, value: kotlin.String) {
      _builder.setLibrary(index, value)
    }/**
     * ```
     * A list of paths to single libraries root directory.
     * ```
     *
     * `repeated string library = 24;`
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("setLibrary")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, LibraryProxy>.clear() {
      _builder.clearLibrary()
    }
    /**
     * ```
     * The path where to search for the custom signing key name and the encrypt
     * key name.
     * ```
     *
     * `string keys_keychain = 25;`
     */
    public var keysKeychain: kotlin.String
      @kotlin.jvm.JvmName("getKeysKeychain")
        get() = _builder.keysKeychain
      @kotlin.jvm.JvmName("setKeysKeychain")
        set(value) {
        _builder.keysKeychain = value
      }
    /**
     * ```
     * The path where to search for the custom signing key name and the encrypt
     * key name.
     * ```
     *
     * `string keys_keychain = 25;`
     */
    public fun clearKeysKeychain() {
      _builder.clearKeysKeychain()
    }

    /**
     * ```
     * The name of the custom key to use for signing during the compile process.
     * ```
     *
     * `string sign_key = 26;`
     */
    public var signKey: kotlin.String
      @kotlin.jvm.JvmName("getSignKey")
        get() = _builder.signKey
      @kotlin.jvm.JvmName("setSignKey")
        set(value) {
        _builder.signKey = value
      }
    /**
     * ```
     * The name of the custom key to use for signing during the compile process.
     * ```
     *
     * `string sign_key = 26;`
     */
    public fun clearSignKey() {
      _builder.clearSignKey()
    }

    /**
     * ```
     * The name of the custom key to use for encrypting during the compile process.
     * ```
     *
     * `string encrypt_key = 27;`
     */
    public var encryptKey: kotlin.String
      @kotlin.jvm.JvmName("getEncryptKey")
        get() = _builder.encryptKey
      @kotlin.jvm.JvmName("setEncryptKey")
        set(value) {
        _builder.encryptKey = value
      }
    /**
     * ```
     * The name of the custom key to use for encrypting during the compile process.
     * ```
     *
     * `string encrypt_key = 27;`
     */
    public fun clearEncryptKey() {
      _builder.clearEncryptKey()
    }

    /**
     * ```
     * If set to true the build will skip the library discovery process and will
     * use the same libraries of latest build. Enabling this flag may produce a
     * wrong output and should not be used in regular compiles unless there is a
     * very specific reason to do so. This flag is mainly provided for usage in
     * language servers to optimize the build speed in some particular cases.
     * ```
     *
     * `bool skip_libraries_discovery = 28;`
     */
    public var skipLibrariesDiscovery: kotlin.Boolean
      @kotlin.jvm.JvmName("getSkipLibrariesDiscovery")
        get() = _builder.skipLibrariesDiscovery
      @kotlin.jvm.JvmName("setSkipLibrariesDiscovery")
        set(value) {
        _builder.skipLibrariesDiscovery = value
      }
    /**
     * ```
     * If set to true the build will skip the library discovery process and will
     * use the same libraries of latest build. Enabling this flag may produce a
     * wrong output and should not be used in regular compiles unless there is a
     * very specific reason to do so. This flag is mainly provided for usage in
     * language servers to optimize the build speed in some particular cases.
     * ```
     *
     * `bool skip_libraries_discovery = 28;`
     */
    public fun clearSkipLibrariesDiscovery() {
      _builder.clearSkipLibrariesDiscovery()
    }

    /**
     * ```
     * If set to true the returned build properties will be left unexpanded, with
     * the variables placeholders exactly as defined in the platform.
     * ```
     *
     * `bool do_not_expand_build_properties = 29;`
     */
    public var doNotExpandBuildProperties: kotlin.Boolean
      @kotlin.jvm.JvmName("getDoNotExpandBuildProperties")
        get() = _builder.doNotExpandBuildProperties
      @kotlin.jvm.JvmName("setDoNotExpandBuildProperties")
        set(value) {
        _builder.doNotExpandBuildProperties = value
      }
    /**
     * ```
     * If set to true the returned build properties will be left unexpanded, with
     * the variables placeholders exactly as defined in the platform.
     * ```
     *
     * `bool do_not_expand_build_properties = 29;`
     */
    public fun clearDoNotExpandBuildProperties() {
      _builder.clearDoNotExpandBuildProperties()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class BuildCacheExtraPathsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * Search for precompiled cores in the given paths and use them if found.
     * This search is performed after the standard build_cache directory.
     * ```
     *
     * `repeated string build_cache_extra_paths = 30;`
     * @return A list containing the buildCacheExtraPaths.
     */
    public val buildCacheExtraPaths: com.google.protobuf.kotlin.DslList<kotlin.String, BuildCacheExtraPathsProxy>
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      get() = com.google.protobuf.kotlin.DslList(
        _builder.buildCacheExtraPathsList
      )
    /**
     * ```
     * Search for precompiled cores in the given paths and use them if found.
     * This search is performed after the standard build_cache directory.
     * ```
     *
     * `repeated string build_cache_extra_paths = 30;`
     * @param value The buildCacheExtraPaths to add.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("addBuildCacheExtraPaths")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, BuildCacheExtraPathsProxy>.add(value: kotlin.String) {
      _builder.addBuildCacheExtraPaths(value)
    }
    /**
     * ```
     * Search for precompiled cores in the given paths and use them if found.
     * This search is performed after the standard build_cache directory.
     * ```
     *
     * `repeated string build_cache_extra_paths = 30;`
     * @param value The buildCacheExtraPaths to add.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("plusAssignBuildCacheExtraPaths")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, BuildCacheExtraPathsProxy>.plusAssign(value: kotlin.String) {
      add(value)
    }
    /**
     * ```
     * Search for precompiled cores in the given paths and use them if found.
     * This search is performed after the standard build_cache directory.
     * ```
     *
     * `repeated string build_cache_extra_paths = 30;`
     * @param values The buildCacheExtraPaths to add.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("addAllBuildCacheExtraPaths")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, BuildCacheExtraPathsProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllBuildCacheExtraPaths(values)
    }
    /**
     * ```
     * Search for precompiled cores in the given paths and use them if found.
     * This search is performed after the standard build_cache directory.
     * ```
     *
     * `repeated string build_cache_extra_paths = 30;`
     * @param values The buildCacheExtraPaths to add.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("plusAssignAllBuildCacheExtraPaths")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, BuildCacheExtraPathsProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
      addAll(values)
    }
    /**
     * ```
     * Search for precompiled cores in the given paths and use them if found.
     * This search is performed after the standard build_cache directory.
     * ```
     *
     * `repeated string build_cache_extra_paths = 30;`
     * @param index The index to set the value at.
     * @param value The buildCacheExtraPaths to set.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("setBuildCacheExtraPaths")
    public operator fun com.google.protobuf.kotlin.DslList<kotlin.String, BuildCacheExtraPathsProxy>.set(index: kotlin.Int, value: kotlin.String) {
      _builder.setBuildCacheExtraPaths(index, value)
    }/**
     * ```
     * Search for precompiled cores in the given paths and use them if found.
     * This search is performed after the standard build_cache directory.
     * ```
     *
     * `repeated string build_cache_extra_paths = 30;`
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("setBuildCacheExtraPaths")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, BuildCacheExtraPathsProxy>.clear() {
      _builder.clearBuildCacheExtraPaths()
    }}
}
@kotlin.jvm.JvmSynthetic
public inline fun protocol_buffers.Compile.CompileRequest.copy(block: `protocol_buffers`.CompileRequestKt.Dsl.() -> kotlin.Unit): protocol_buffers.Compile.CompileRequest =
  `protocol_buffers`.CompileRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val protocol_buffers.Compile.CompileRequestOrBuilder.instanceOrNull: protocol_buffers.Common.Instance?
  get() = if (hasInstance()) getInstance() else null

