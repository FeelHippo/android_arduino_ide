// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: app/src/main/java/com/example/arduinoide/cli/commands/proto/compile.proto
// Protobuf Java Version: 4.31.1

package protocol_buffers;

@com.google.protobuf.Generated
public interface CompileRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:protocol_buffers.CompileRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Arduino Core Service instance from the `Init` response.
   * </pre>
   *
   * <code>.protocol_buffers.Instance instance = 1;</code>
   * @return Whether the instance field is set.
   */
  boolean hasInstance();
  /**
   * <pre>
   * Arduino Core Service instance from the `Init` response.
   * </pre>
   *
   * <code>.protocol_buffers.Instance instance = 1;</code>
   * @return The instance.
   */
  protocol_buffers.Instance getInstance();
  /**
   * <pre>
   * Arduino Core Service instance from the `Init` response.
   * </pre>
   *
   * <code>.protocol_buffers.Instance instance = 1;</code>
   */
  protocol_buffers.InstanceOrBuilder getInstanceOrBuilder();

  /**
   * <pre>
   * Fully Qualified Board Name, e.g.: `arduino:avr:uno`. If this field is
   * not defined, the FQBN of the board attached to the sketch via the
   * `BoardAttach` method is used.
   * </pre>
   *
   * <code>string fqbn = 2;</code>
   * @return The fqbn.
   */
  java.lang.String getFqbn();
  /**
   * <pre>
   * Fully Qualified Board Name, e.g.: `arduino:avr:uno`. If this field is
   * not defined, the FQBN of the board attached to the sketch via the
   * `BoardAttach` method is used.
   * </pre>
   *
   * <code>string fqbn = 2;</code>
   * @return The bytes for fqbn.
   */
  com.google.protobuf.ByteString
      getFqbnBytes();

  /**
   * <pre>
   * The path where the sketch is stored.
   * </pre>
   *
   * <code>string sketch_path = 3;</code>
   * @return The sketchPath.
   */
  java.lang.String getSketchPath();
  /**
   * <pre>
   * The path where the sketch is stored.
   * </pre>
   *
   * <code>string sketch_path = 3;</code>
   * @return The bytes for sketchPath.
   */
  com.google.protobuf.ByteString
      getSketchPathBytes();

  /**
   * <pre>
   * Just get the build properties and do not run the full compile.
   * </pre>
   *
   * <code>bool show_properties = 4;</code>
   * @return The showProperties.
   */
  boolean getShowProperties();

  /**
   * <pre>
   * Print preprocessed code to stdout instead of compiling.
   * </pre>
   *
   * <code>bool preprocess = 5;</code>
   * @return The preprocess.
   */
  boolean getPreprocess();

  /**
   * <pre>
   * Builds of core and sketches are saved into this path to be cached and
   * reused.
   * </pre>
   *
   * <code>string build_cache_path = 6 [deprecated = true];</code>
   * @deprecated protocol_buffers.CompileRequest.build_cache_path is deprecated.
   *     See app/src/main/java/com/example/arduinoide/cli/commands/proto/compile.proto;l=46
   * @return The buildCachePath.
   */
  @java.lang.Deprecated java.lang.String getBuildCachePath();
  /**
   * <pre>
   * Builds of core and sketches are saved into this path to be cached and
   * reused.
   * </pre>
   *
   * <code>string build_cache_path = 6 [deprecated = true];</code>
   * @deprecated protocol_buffers.CompileRequest.build_cache_path is deprecated.
   *     See app/src/main/java/com/example/arduinoide/cli/commands/proto/compile.proto;l=46
   * @return The bytes for buildCachePath.
   */
  @java.lang.Deprecated com.google.protobuf.ByteString
      getBuildCachePathBytes();

  /**
   * <pre>
   * Path to use to store the files used for the compilation. If omitted,
   * a directory will be created in the operating system's default temporary
   * path.
   * </pre>
   *
   * <code>string build_path = 7;</code>
   * @return The buildPath.
   */
  java.lang.String getBuildPath();
  /**
   * <pre>
   * Path to use to store the files used for the compilation. If omitted,
   * a directory will be created in the operating system's default temporary
   * path.
   * </pre>
   *
   * <code>string build_path = 7;</code>
   * @return The bytes for buildPath.
   */
  com.google.protobuf.ByteString
      getBuildPathBytes();

  /**
   * <pre>
   * List of custom build properties.
   * </pre>
   *
   * <code>repeated string build_properties = 8;</code>
   * @return A list containing the buildProperties.
   */
  java.util.List<java.lang.String>
      getBuildPropertiesList();
  /**
   * <pre>
   * List of custom build properties.
   * </pre>
   *
   * <code>repeated string build_properties = 8;</code>
   * @return The count of buildProperties.
   */
  int getBuildPropertiesCount();
  /**
   * <pre>
   * List of custom build properties.
   * </pre>
   *
   * <code>repeated string build_properties = 8;</code>
   * @param index The index of the element to return.
   * @return The buildProperties at the given index.
   */
  java.lang.String getBuildProperties(int index);
  /**
   * <pre>
   * List of custom build properties.
   * </pre>
   *
   * <code>repeated string build_properties = 8;</code>
   * @param index The index of the value to return.
   * @return The bytes of the buildProperties at the given index.
   */
  com.google.protobuf.ByteString
      getBuildPropertiesBytes(int index);

  /**
   * <pre>
   * Used to tell gcc which warning level to use. The level names are: "none",
   * "default", "more" and "all".
   * </pre>
   *
   * <code>string warnings = 9;</code>
   * @return The warnings.
   */
  java.lang.String getWarnings();
  /**
   * <pre>
   * Used to tell gcc which warning level to use. The level names are: "none",
   * "default", "more" and "all".
   * </pre>
   *
   * <code>string warnings = 9;</code>
   * @return The bytes for warnings.
   */
  com.google.protobuf.ByteString
      getWarningsBytes();

  /**
   * <pre>
   * Turns on verbose mode.
   * </pre>
   *
   * <code>bool verbose = 10;</code>
   * @return The verbose.
   */
  boolean getVerbose();

  /**
   * <pre>
   * Suppresses almost every output.
   * </pre>
   *
   * <code>bool quiet = 11;</code>
   * @return The quiet.
   */
  boolean getQuiet();

  /**
   * <pre>
   * The max number of concurrent compiler instances to run (as `make -jx`).
   * If jobs is set to 0, it will use the number of available CPUs as the
   * maximum.
   * </pre>
   *
   * <code>int32 jobs = 14;</code>
   * @return The jobs.
   */
  int getJobs();

  /**
   * <pre>
   * A list of paths to directories containing a collection of libraries.
   * </pre>
   *
   * <code>repeated string libraries = 15;</code>
   * @return A list containing the libraries.
   */
  java.util.List<java.lang.String>
      getLibrariesList();
  /**
   * <pre>
   * A list of paths to directories containing a collection of libraries.
   * </pre>
   *
   * <code>repeated string libraries = 15;</code>
   * @return The count of libraries.
   */
  int getLibrariesCount();
  /**
   * <pre>
   * A list of paths to directories containing a collection of libraries.
   * </pre>
   *
   * <code>repeated string libraries = 15;</code>
   * @param index The index of the element to return.
   * @return The libraries at the given index.
   */
  java.lang.String getLibraries(int index);
  /**
   * <pre>
   * A list of paths to directories containing a collection of libraries.
   * </pre>
   *
   * <code>repeated string libraries = 15;</code>
   * @param index The index of the value to return.
   * @return The bytes of the libraries at the given index.
   */
  com.google.protobuf.ByteString
      getLibrariesBytes(int index);

  /**
   * <pre>
   * Optimize compile output for debug, not for release.
   * </pre>
   *
   * <code>bool optimize_for_debug = 16;</code>
   * @return The optimizeForDebug.
   */
  boolean getOptimizeForDebug();

  /**
   * <pre>
   * Optional: save the build artifacts in this directory, the directory must
   * exist.
   * </pre>
   *
   * <code>string export_dir = 18;</code>
   * @return The exportDir.
   */
  java.lang.String getExportDir();
  /**
   * <pre>
   * Optional: save the build artifacts in this directory, the directory must
   * exist.
   * </pre>
   *
   * <code>string export_dir = 18;</code>
   * @return The bytes for exportDir.
   */
  com.google.protobuf.ByteString
      getExportDirBytes();

  /**
   * <pre>
   * Optional: cleanup the build folder and do not use any previously cached
   * build.
   * </pre>
   *
   * <code>bool clean = 19;</code>
   * @return The clean.
   */
  boolean getClean();

  /**
   * <pre>
   * When set to `true` only the compilation database will be produced and no
   * actual build will be performed.
   * </pre>
   *
   * <code>bool create_compilation_database_only = 21;</code>
   * @return The createCompilationDatabaseOnly.
   */
  boolean getCreateCompilationDatabaseOnly();

  /**
   * <pre>
   * This map (source file -&gt; new content) let the builder use the provided
   * content instead of reading the corresponding file on disk. This is useful
   * for IDE that have unsaved changes in memory. The path must be relative to
   * the sketch directory. Only files from the sketch are allowed.
   * </pre>
   *
   * <code>map&lt;string, string&gt; source_override = 22;</code>
   */
  int getSourceOverrideCount();
  /**
   * <pre>
   * This map (source file -&gt; new content) let the builder use the provided
   * content instead of reading the corresponding file on disk. This is useful
   * for IDE that have unsaved changes in memory. The path must be relative to
   * the sketch directory. Only files from the sketch are allowed.
   * </pre>
   *
   * <code>map&lt;string, string&gt; source_override = 22;</code>
   */
  boolean containsSourceOverride(
      java.lang.String key);
  /**
   * Use {@link #getSourceOverrideMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getSourceOverride();
  /**
   * <pre>
   * This map (source file -&gt; new content) let the builder use the provided
   * content instead of reading the corresponding file on disk. This is useful
   * for IDE that have unsaved changes in memory. The path must be relative to
   * the sketch directory. Only files from the sketch are allowed.
   * </pre>
   *
   * <code>map&lt;string, string&gt; source_override = 22;</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getSourceOverrideMap();
  /**
   * <pre>
   * This map (source file -&gt; new content) let the builder use the provided
   * content instead of reading the corresponding file on disk. This is useful
   * for IDE that have unsaved changes in memory. The path must be relative to
   * the sketch directory. Only files from the sketch are allowed.
   * </pre>
   *
   * <code>map&lt;string, string&gt; source_override = 22;</code>
   */
  /* nullable */
java.lang.String getSourceOverrideOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue);
  /**
   * <pre>
   * This map (source file -&gt; new content) let the builder use the provided
   * content instead of reading the corresponding file on disk. This is useful
   * for IDE that have unsaved changes in memory. The path must be relative to
   * the sketch directory. Only files from the sketch are allowed.
   * </pre>
   *
   * <code>map&lt;string, string&gt; source_override = 22;</code>
   */
  java.lang.String getSourceOverrideOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * When set to `true` the compiled binary will be copied to the export
   * directory.
   * </pre>
   *
   * <code>optional bool export_binaries = 23;</code>
   * @return Whether the exportBinaries field is set.
   */
  boolean hasExportBinaries();
  /**
   * <pre>
   * When set to `true` the compiled binary will be copied to the export
   * directory.
   * </pre>
   *
   * <code>optional bool export_binaries = 23;</code>
   * @return The exportBinaries.
   */
  boolean getExportBinaries();

  /**
   * <pre>
   * A list of paths to single libraries root directory.
   * </pre>
   *
   * <code>repeated string library = 24;</code>
   * @return A list containing the library.
   */
  java.util.List<java.lang.String>
      getLibraryList();
  /**
   * <pre>
   * A list of paths to single libraries root directory.
   * </pre>
   *
   * <code>repeated string library = 24;</code>
   * @return The count of library.
   */
  int getLibraryCount();
  /**
   * <pre>
   * A list of paths to single libraries root directory.
   * </pre>
   *
   * <code>repeated string library = 24;</code>
   * @param index The index of the element to return.
   * @return The library at the given index.
   */
  java.lang.String getLibrary(int index);
  /**
   * <pre>
   * A list of paths to single libraries root directory.
   * </pre>
   *
   * <code>repeated string library = 24;</code>
   * @param index The index of the value to return.
   * @return The bytes of the library at the given index.
   */
  com.google.protobuf.ByteString
      getLibraryBytes(int index);

  /**
   * <pre>
   * The path where to search for the custom signing key name and the encrypt
   * key name.
   * </pre>
   *
   * <code>string keys_keychain = 25;</code>
   * @return The keysKeychain.
   */
  java.lang.String getKeysKeychain();
  /**
   * <pre>
   * The path where to search for the custom signing key name and the encrypt
   * key name.
   * </pre>
   *
   * <code>string keys_keychain = 25;</code>
   * @return The bytes for keysKeychain.
   */
  com.google.protobuf.ByteString
      getKeysKeychainBytes();

  /**
   * <pre>
   * The name of the custom key to use for signing during the compile process.
   * </pre>
   *
   * <code>string sign_key = 26;</code>
   * @return The signKey.
   */
  java.lang.String getSignKey();
  /**
   * <pre>
   * The name of the custom key to use for signing during the compile process.
   * </pre>
   *
   * <code>string sign_key = 26;</code>
   * @return The bytes for signKey.
   */
  com.google.protobuf.ByteString
      getSignKeyBytes();

  /**
   * <pre>
   * The name of the custom key to use for encrypting during the compile process.
   * </pre>
   *
   * <code>string encrypt_key = 27;</code>
   * @return The encryptKey.
   */
  java.lang.String getEncryptKey();
  /**
   * <pre>
   * The name of the custom key to use for encrypting during the compile process.
   * </pre>
   *
   * <code>string encrypt_key = 27;</code>
   * @return The bytes for encryptKey.
   */
  com.google.protobuf.ByteString
      getEncryptKeyBytes();

  /**
   * <pre>
   * If set to true the build will skip the library discovery process and will
   * use the same libraries of latest build. Enabling this flag may produce a
   * wrong output and should not be used in regular compiles unless there is a
   * very specific reason to do so. This flag is mainly provided for usage in
   * language servers to optimize the build speed in some particular cases.
   * </pre>
   *
   * <code>bool skip_libraries_discovery = 28;</code>
   * @return The skipLibrariesDiscovery.
   */
  boolean getSkipLibrariesDiscovery();

  /**
   * <pre>
   * If set to true the returned build properties will be left unexpanded, with
   * the variables placeholders exactly as defined in the platform.
   * </pre>
   *
   * <code>bool do_not_expand_build_properties = 29;</code>
   * @return The doNotExpandBuildProperties.
   */
  boolean getDoNotExpandBuildProperties();

  /**
   * <pre>
   * Search for precompiled cores in the given paths and use them if found.
   * This search is performed after the standard build_cache directory.
   * </pre>
   *
   * <code>repeated string build_cache_extra_paths = 30;</code>
   * @return A list containing the buildCacheExtraPaths.
   */
  java.util.List<java.lang.String>
      getBuildCacheExtraPathsList();
  /**
   * <pre>
   * Search for precompiled cores in the given paths and use them if found.
   * This search is performed after the standard build_cache directory.
   * </pre>
   *
   * <code>repeated string build_cache_extra_paths = 30;</code>
   * @return The count of buildCacheExtraPaths.
   */
  int getBuildCacheExtraPathsCount();
  /**
   * <pre>
   * Search for precompiled cores in the given paths and use them if found.
   * This search is performed after the standard build_cache directory.
   * </pre>
   *
   * <code>repeated string build_cache_extra_paths = 30;</code>
   * @param index The index of the element to return.
   * @return The buildCacheExtraPaths at the given index.
   */
  java.lang.String getBuildCacheExtraPaths(int index);
  /**
   * <pre>
   * Search for precompiled cores in the given paths and use them if found.
   * This search is performed after the standard build_cache directory.
   * </pre>
   *
   * <code>repeated string build_cache_extra_paths = 30;</code>
   * @param index The index of the value to return.
   * @return The bytes of the buildCacheExtraPaths at the given index.
   */
  com.google.protobuf.ByteString
      getBuildCacheExtraPathsBytes(int index);
}
