// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: app/src/main/java/com/example/arduinoide/cli/commands/proto/common.proto
// Protobuf Java Version: 4.31.1

package protocol_buffers;

@com.google.protobuf.Generated
public interface PlatformReleaseOrBuilder extends
    // @@protoc_insertion_point(interface_extends:protocol_buffers.PlatformRelease)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Name used to identify the platform to humans (e.g., "Arduino AVR Boards").
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * Name used to identify the platform to humans (e.g., "Arduino AVR Boards").
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * Version of the platform release.
   * </pre>
   *
   * <code>string version = 2;</code>
   * @return The version.
   */
  java.lang.String getVersion();
  /**
   * <pre>
   * Version of the platform release.
   * </pre>
   *
   * <code>string version = 2;</code>
   * @return The bytes for version.
   */
  com.google.protobuf.ByteString
      getVersionBytes();

  /**
   * <pre>
   * Type of the platform.
   * </pre>
   *
   * <code>repeated string types = 3;</code>
   * @return A list containing the types.
   */
  java.util.List<java.lang.String>
      getTypesList();
  /**
   * <pre>
   * Type of the platform.
   * </pre>
   *
   * <code>repeated string types = 3;</code>
   * @return The count of types.
   */
  int getTypesCount();
  /**
   * <pre>
   * Type of the platform.
   * </pre>
   *
   * <code>repeated string types = 3;</code>
   * @param index The index of the element to return.
   * @return The types at the given index.
   */
  java.lang.String getTypes(int index);
  /**
   * <pre>
   * Type of the platform.
   * </pre>
   *
   * <code>repeated string types = 3;</code>
   * @param index The index of the value to return.
   * @return The bytes of the types at the given index.
   */
  com.google.protobuf.ByteString
      getTypesBytes(int index);

  /**
   * <pre>
   * True if the platform is installed.
   * </pre>
   *
   * <code>bool installed = 4;</code>
   * @return The installed.
   */
  boolean getInstalled();

  /**
   * <pre>
   * List of boards provided by the platform. If the platform is installed,
   * this is the boards listed in the platform's boards.txt. If the platform is
   * not installed, this is an arbitrary list of board names provided by the
   * platform author for display and may not match boards.txt.
   * </pre>
   *
   * <code>repeated .protocol_buffers.Board boards = 5;</code>
   */
  java.util.List<protocol_buffers.Board> 
      getBoardsList();
  /**
   * <pre>
   * List of boards provided by the platform. If the platform is installed,
   * this is the boards listed in the platform's boards.txt. If the platform is
   * not installed, this is an arbitrary list of board names provided by the
   * platform author for display and may not match boards.txt.
   * </pre>
   *
   * <code>repeated .protocol_buffers.Board boards = 5;</code>
   */
  protocol_buffers.Board getBoards(int index);
  /**
   * <pre>
   * List of boards provided by the platform. If the platform is installed,
   * this is the boards listed in the platform's boards.txt. If the platform is
   * not installed, this is an arbitrary list of board names provided by the
   * platform author for display and may not match boards.txt.
   * </pre>
   *
   * <code>repeated .protocol_buffers.Board boards = 5;</code>
   */
  int getBoardsCount();
  /**
   * <pre>
   * List of boards provided by the platform. If the platform is installed,
   * this is the boards listed in the platform's boards.txt. If the platform is
   * not installed, this is an arbitrary list of board names provided by the
   * platform author for display and may not match boards.txt.
   * </pre>
   *
   * <code>repeated .protocol_buffers.Board boards = 5;</code>
   */
  java.util.List<? extends protocol_buffers.BoardOrBuilder> 
      getBoardsOrBuilderList();
  /**
   * <pre>
   * List of boards provided by the platform. If the platform is installed,
   * this is the boards listed in the platform's boards.txt. If the platform is
   * not installed, this is an arbitrary list of board names provided by the
   * platform author for display and may not match boards.txt.
   * </pre>
   *
   * <code>repeated .protocol_buffers.Board boards = 5;</code>
   */
  protocol_buffers.BoardOrBuilder getBoardsOrBuilder(
      int index);

  /**
   * <pre>
   * A URL provided by the author of the platform's package, intended to point
   * to their online help service.
   * </pre>
   *
   * <code>.protocol_buffers.HelpResources help = 6;</code>
   * @return Whether the help field is set.
   */
  boolean hasHelp();
  /**
   * <pre>
   * A URL provided by the author of the platform's package, intended to point
   * to their online help service.
   * </pre>
   *
   * <code>.protocol_buffers.HelpResources help = 6;</code>
   * @return The help.
   */
  protocol_buffers.HelpResources getHelp();
  /**
   * <pre>
   * A URL provided by the author of the platform's package, intended to point
   * to their online help service.
   * </pre>
   *
   * <code>.protocol_buffers.HelpResources help = 6;</code>
   */
  protocol_buffers.HelpResourcesOrBuilder getHelpOrBuilder();

  /**
   * <pre>
   * This field is true if the platform is missing installation metadata (this
   * happens if the platform has been installed with the legacy Arduino IDE
   * &lt;=1.8.x). If the platform miss metadata and it's not indexed through a
   * package index, it may fail to work correctly in some circumstances, and it
   * may need to be reinstalled. This should be evaluated only when the
   * PlatformRelease is `Installed` otherwise is an undefined behaviour.
   * </pre>
   *
   * <code>bool missing_metadata = 7;</code>
   * @return The missingMetadata.
   */
  boolean getMissingMetadata();

  /**
   * <pre>
   * True this release is deprecated.
   * </pre>
   *
   * <code>bool deprecated = 8;</code>
   * @return The deprecated.
   */
  boolean getDeprecated();

  /**
   * <pre>
   * True if the platform dependencies are available for the current OS/ARCH.
   * This also means that the platform is installable.
   * </pre>
   *
   * <code>bool compatible = 9;</code>
   * @return The compatible.
   */
  boolean getCompatible();
}
