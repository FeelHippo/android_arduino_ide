// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: main/proto/common.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package main.proto;

@kotlin.jvm.JvmName("-initializesketchProfile")
public inline fun sketchProfile(block: main.proto.SketchProfileKt.Dsl.() -> kotlin.Unit): main.proto.Common.SketchProfile =
  main.proto.SketchProfileKt.Dsl._create(main.proto.Common.SketchProfile.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `main.proto.SketchProfile`
 */
public object SketchProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: main.proto.Common.SketchProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: main.proto.Common.SketchProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): main.proto.Common.SketchProfile = _builder.build()

    /**
     * ```
     * Name of the profile.
     * ```
     *
     * `string name = 1;`
     */
    public var name: kotlin.String
      @kotlin.jvm.JvmName("getName")
        get() = _builder.name
      @kotlin.jvm.JvmName("setName")
        set(value) {
        _builder.name = value
      }
    /**
     * ```
     * Name of the profile.
     * ```
     *
     * `string name = 1;`
     */
    public fun clearName() {
      _builder.clearName()
    }

    /**
     * ```
     * FQBN used by the profile.
     * ```
     *
     * `string fqbn = 2;`
     */
    public var fqbn: kotlin.String
      @kotlin.jvm.JvmName("getFqbn")
        get() = _builder.fqbn
      @kotlin.jvm.JvmName("setFqbn")
        set(value) {
        _builder.fqbn = value
      }
    /**
     * ```
     * FQBN used by the profile.
     * ```
     *
     * `string fqbn = 2;`
     */
    public fun clearFqbn() {
      _builder.clearFqbn()
    }

    /**
     * ```
     * Programmer used by the profile.
     * ```
     *
     * `string programmer = 3;`
     */
    public var programmer: kotlin.String
      @kotlin.jvm.JvmName("getProgrammer")
        get() = _builder.programmer
      @kotlin.jvm.JvmName("setProgrammer")
        set(value) {
        _builder.programmer = value
      }
    /**
     * ```
     * Programmer used by the profile.
     * ```
     *
     * `string programmer = 3;`
     */
    public fun clearProgrammer() {
      _builder.clearProgrammer()
    }

    /**
     * ```
     * Default Port in this profile.
     * ```
     *
     * `string port = 4;`
     */
    public var port: kotlin.String
      @kotlin.jvm.JvmName("getPort")
        get() = _builder.port
      @kotlin.jvm.JvmName("setPort")
        set(value) {
        _builder.port = value
      }
    /**
     * ```
     * Default Port in this profile.
     * ```
     *
     * `string port = 4;`
     */
    public fun clearPort() {
      _builder.clearPort()
    }

    /**
     * ```
     * Default Port configuration set in project file (sketch.yaml).
     * ```
     *
     * `.main.proto.MonitorPortConfiguration port_config = 5;`
     */
    public var portConfig: main.proto.Common.MonitorPortConfiguration
      @kotlin.jvm.JvmName("getPortConfig")
        get() = _builder.portConfig
      @kotlin.jvm.JvmName("setPortConfig")
        set(value) {
        _builder.portConfig = value
      }
    /**
     * ```
     * Default Port configuration set in project file (sketch.yaml).
     * ```
     *
     * `.main.proto.MonitorPortConfiguration port_config = 5;`
     */
    public fun clearPortConfig() {
      _builder.clearPortConfig()
    }
    /**
     * ```
     * Default Port configuration set in project file (sketch.yaml).
     * ```
     *
     * `.main.proto.MonitorPortConfiguration port_config = 5;`
     * @return Whether the portConfig field is set.
     */
    public fun hasPortConfig(): kotlin.Boolean {
      return _builder.hasPortConfig()
    }

    public val SketchProfileKt.Dsl.portConfigOrNull: main.proto.Common.MonitorPortConfiguration?
      get() = _builder.portConfigOrNull

    /**
     * ```
     * Default Protocol in this profile.
     * ```
     *
     * `string protocol = 6;`
     */
    public var protocol: kotlin.String
      @kotlin.jvm.JvmName("getProtocol")
        get() = _builder.protocol
      @kotlin.jvm.JvmName("setProtocol")
        set(value) {
        _builder.protocol = value
      }
    /**
     * ```
     * Default Protocol in this profile.
     * ```
     *
     * `string protocol = 6;`
     */
    public fun clearProtocol() {
      _builder.clearProtocol()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun main.proto.Common.SketchProfile.copy(block: `main.proto`.SketchProfileKt.Dsl.() -> kotlin.Unit): main.proto.Common.SketchProfile =
  `main.proto`.SketchProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val main.proto.Common.SketchProfileOrBuilder.portConfigOrNull: main.proto.Common.MonitorPortConfiguration?
  get() = if (hasPortConfig()) getPortConfig() else null

